{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport PodcastPlayer from '../components/PodcastPlayer';\nimport Error from './_error';\n\nvar _default =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          clip = _this$props.clip,\n          statusCode = _this$props.statusCode;\n\n      if (statusCode !== 200) {\n        return __jsx(Error, {\n          statusCode: statusCode\n        });\n      }\n\n      return __jsx(Layout, {\n        title: clip.title\n      }, __jsx(PodcastPlayer, {\n        clip: clip\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, res, id, fetchClip, clip;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query, res = _ref.res;\n              id = query.id;\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetch(\"https://api.audioboom.com/audio_clips/\".concat(id, \".mp3\")));\n\n            case 5:\n              fetchClip = _context.sent;\n\n              if (!(fetchClip.status >= 400)) {\n                _context.next = 9;\n                break;\n              }\n\n              res.statusCode = fetchClip.status;\n              return _context.abrupt(\"return\", {\n                clip: null,\n                statusCode: fetchClip.status\n              });\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(fetchClip.json());\n\n            case 11:\n              clip = _context.sent.body.audio_clip;\n              return _context.abrupt(\"return\", {\n                clip: clip,\n                statusCode: 200\n              });\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", {\n                clip: null,\n                statusCode: 503\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 15]]);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":null,"metadata":{},"sourceType":"module"}